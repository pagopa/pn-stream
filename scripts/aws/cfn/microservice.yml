AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  VpcEgressSubnetsIds:
    Type: String
    Description: 'subnets ids. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'

  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  # Instance parameters
  # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
  # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
  # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
  # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
  # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
  CpuValue:
    Type: Number
    Default: 1024
    Description: Fargate virtual CPU quantity 1024 equals one vCPU

  MemoryAmount:
    Type: String
    Default: 2GB
    Description: memory amount reserved to the task pod.
    AllowedValues: [ 2GB, 4GB, 6GB, 8GB ]

  HealthCheckTimeout:
    Description: Health check timeout in seconds
    Type: Number
    Default: 5

  HealthCheckInterval:
    Description: Health check interval in seconds
    Type: Number
    Default: 60

  HealthyThresholdCount:
    Type: Number
    Default: 3
    Description: Number of consecutive health check successes required before considering an unhealthy target healthy

  UnhealthyThresholdCount:
    Type: Number
    Default: 3
    Description: Number of consecutive health check failures required before considering a target unhealthy

  MinTasksNumber:
    Type: Number
    Default: 1
    Description: Minimum number of tasks for the service

  MaxTasksNumber:
    Type: Number
    Default: 10
    Description: Maximum number of tasks for the service

  FargateEFSFileSystemID:
    Type: String
    Description: EFS File System ID for Fargate

  MountEfs:
    Type: String
    Description: Whether to mount EFS (true/false)
    Default: 'false'

  WireTapLogActivation:
    Type: String
    Description: Whether to activate wiretap logging (true/false)
    Default: 'false'

  AlbSecurityGroup:
    Type: String
    Description: Security group for the application load balancer

  EcsLogGroup:
    Type: String
    Description: Log group for ECS

  LogAlarmStrategy:
    Type: String
    Description: Log alarm strategy
    Default: 'FATAL'


  NotificationStreamManagerLambdaName:
    Type: String

  # OpenApi Bucket params
  MicroserviceBucketName:
    Type: String
    Default: ''
    Description: 'Name of the bucket where the microservice files are copied during deploy'


  MicroserviceBucketBaseKey:
    Type: String
    Default: ''
    Description: 'Base key of the microservice in the s3 bucket'

  NotificationStreamManagerDLQAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for NotificationStreamManagerLambda'

  NotificationStreamManagerDLQARN:
    Type: String
    Description: 'DLQ ARN for NotificationStreamManagerLambda'

  EventQueueAlarmARN:
    Type: String
    Description: stream actions queue dlq alarm ARN

  EventQueueAgeAlarmARN:
    Type: String
    Description: stream actions queue age alarm ARN

  EventQueueName:
    Type: String
    Description: actions queue name

  EventQueueARN:
    Type: String
    Description: actions queue ARN

  EventQueueURL:
    Type: String
    Description: actions queue URL

  NotificationStreamManagerLambdaMaximumBatchingWindowInSeconds:
    Type: Number
    Default: 20
    Description: Batching window size for lambda triggering

  StreamEventManagerLambdaMaximumBatchingWindowInSeconds:
    Type: Number
    Default: 20
    Description: Batching window size for lambda triggering

  NotificationStreamManagerLambdaBatchSize:
    Type: Number
    Default: 60
    Description: Batch size for lambda triggering

  StreamEventManagerLambdaBatchSize:
    Type: Number
    Default: 60
    Description: Batch size for lambda triggering

  CdcKinesisSourceStreamArn:
    Type: String
    Description: 'Where to send CDC'

  CdcKinesisSourceStreamKeyArn:
    Description: "Kinesis source CDC stream crypto key ARN"
    Type: String

  StreamNotificationTableName:
    Type: String
    Description: 'Name of dynamodb table containing stream notifications'

  StreamNotificationTtl:
    Type: Number
    Description: 'TTL offset for stream notifications'
    Default: 7889400

  StreamNotificationTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing stream notifications'

  StartReadStreamTimestamp:
    Type: String
    Description: 'Start timestamp for read stream'
    Default: "2099-01-01T00:00:00Z"

  StopReadStreamTimestamp:
    Type: String
    Description: 'Stop timestamp for read stream'
    Default: "2099-01-01T00:00:00Z"

  StreamsTableName:
    Type: String
    Description: 'Name of dynamodb table containing stream'

  StreamsTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing stream'

  EventsTableName:
    Type: String
    Description: 'Name of dynamodb table containing events'

  EventsTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing events'

  PnNotificationTableName:
    Type: String
    Description: 'Name of dynamodb table containing'

  StreamAutoscalingThreshold:
    Type: Number
    Description: 'Threshold for autoscaling'
    Default: 1000

  ScheduleInterval:
    Type: String
    Description: 'Time interval between two webhook-scans every scan send notifications
                  update to Public Administration'
    Default: 60000

  ScheduledActionsQueueName:
    Type: String
    Description: 'Name of the queue containing scheduled actions'

  ScheduledActionsQueueARN:
    Type: String
    Description: 'Send and pull ready-to-do actions th this queue'

  ScheduledActionsQueueAlarmARN:
    Type: String
    Description: delivery push actions done queue dlq alarm ARN

  ScheduledActionsQueueAgeAlarmARN:
    Type: String
    Description: delivery push actions done queue age alarm ARN

  MaxStreams:
    Type: String
    Description: 'Max stream number'

  MaxLength:
    Type: String
    Description: 'Max elements quantity for each webhook call'

  RetryParameterPrefix:
    Type: String
    Description: 'Retry parameter prefix'

  RetryAfterEnabled:
    Type: String
    Description: 'Allow to enable or disable retry after exception'
    Default: 'false'
    AllowedValues: [ true, false ]

  StreamEventManagerLambdaName:
    Type: String
    Description: 'Name of the lambda function that manages the stream events'

  StreamEventManagerDLQARN:
    Type: String
    Description: 'ARN of the DLQ queue for stream event manager lambda'

  PnTimelinesTableName:
    Type: String
    Description: 'Name of dynamodb table containing'

  MaximumRetryAttemptsValueStream:
    Type: Number
    Description: 'Maximum number of retries for stream lambda function'
    Default: 5

  MaximumRetryAttemptsValueNotification:
    Type: Number
    Description: 'Maximum number of retries for notification lambda function'
    Default: 5

  EventsQuarantineTableName:
    Type: String
    Description: Name of dynamodb table containing quarantined events

  EventsQuarantineTableArn:
    Type: String
    Description: ARN of dynamodb table containing quarantined events

  # Event schedule queue
  EventScheduleQueueName:
    Type: String
    Description: 'pn-stream_schedule queue name'

  EventScheduleQueueARN:
    Type: String
    Description: 'pn-stream_schedule queue ARN'

  EventScheduleQueueAlarmARN:
    Type: String
    Description: 'pn-stream_schedule queue dlq alarm ARN'

  EventScheduleQueueAgeAlarmARN:
    Type: String
    Description: 'pn-stream_schedule queue age alarm ARN'


  NotificationUnlockedTableName:
    Type: String
    Description: Name of dynamodb table containing the unlocked notification

  NotificationUnlockedTableArn:
    Type: String
    Description: ARN of dynamodb table containing the unlocked notification

  SortEventDelaySeconds:
    Type: Number
    Description: 'Sort event delay seconds'
    Default: 30

  UnlockedEventTtl:
    Type: String
    Description: 'Period for TTL of unlocked events'
    Default: 1d

  notificationSla:
    Type: String
    Description: 'Period for TTL of notification SLA'
    Default: 1d

  MaxWrittenCounter:
    Type: Number
    Description: 'Max written counter for schedule unlock events'

  QueryEventQuarantineLimit:
    Type: Number
    Description: 'Limit for query on event quarantine table'
    Default: 100

Resources:

  # pn-stream microservice
  StreamMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-stream'
        CpuValue: !Ref CpuValue
        MemoryAmount: !Ref MemoryAmount
        HealthCheckPath: /actuator/health
        HealthCheckTimeout: !Ref HealthCheckTimeout
        HealthCheckInterval: !Ref HealthCheckInterval
        HealthyThresholdCount: !Ref HealthyThresholdCount
        UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
        AutoscalingStrategy: 'SQS'
        AutoscalingQueueName: !Ref EventQueueName
        AutoscalingThreshold: !Ref StreamAutoscalingThreshold
        MinTasksNumber: !Ref MinTasksNumber
        MaxTasksNumber: !Ref MaxTasksNumber
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        EfsFilesystem: !Ref FargateEFSFileSystemID
        MountEfs: !Ref MountEfs
        WireTapLogActivation: !Ref WireTapLogActivation
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub "AWS_REGIONCODE=${AWS::Region}"
        ContainerEnvEntry2: !Sub 'PN_STREAM_DAO_STREAMNOTIFICATIONTABLENAME=${StreamNotificationTableName}'
        ContainerEnvEntry3: !Sub 'PN_STREAM_SCHEDULEINTERVAL=${ScheduleInterval}'
        ContainerEnvEntry4: !Sub 'PN_STREAM_TOPICS_SCHEDULEDACTIONS=${ScheduledActionsQueueName}'
        ContainerEnvEntry5: !Sub 'PN_STREAM_MAXSTREAMS=${MaxStreams}'
        ContainerEnvEntry6: !Sub 'PN_STREAM_MAXLENGTH=${MaxLength}'
        ContainerEnvEntry7: !Sub 'PN_STREAM_EXTERNALREGISTRYBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry8: !Sub 'PN_STREAM_DAO_EVENTSTABLENAME=${EventsTableName}'
        ContainerEnvEntry9: !Sub 'PN_STREAM_DAO_STREAMSTABLENAME=${StreamsTableName}'
        ContainerEnvEntry10: 'PN_STREAM_DATAVAULTBASEURL=http://alb.confidential.pn.internal:8080'
        ContainerEnvEntry11: !Sub 'PN_STREAM_RETRYPARAMETERPREFIX=${RetryParameterPrefix}'
        ContainerEnvEntry12: !Sub 'PN_STREAM_RETRYAFTERENABLED=${RetryAfterEnabled}'
        ContainerEnvEntry13: !Sub 'PN_STREAM_TOPICS_EVENT=${EventQueueName}'
        ContainerEnvEntry14: !Sub 'SPRING_CLOUD_FUNCTIONROUTER_QUEUES_LIST=${EventQueueName},${ScheduledActionsQueueName},${EventScheduleQueueName}'
        ContainerEnvEntry15: !Sub 'PN_STREAM_DELIVERYBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry16: !Sub 'PN_STREAM_STREAMNOTIFICATIONTTL=${StreamNotificationTtl}'
        ContainerEnvEntry17: !Sub 'PN_STREAM_TOPICS_EVENTSCHEDULE=${EventScheduleQueueName}'
        ContainerEnvEntry18: !Sub 'PN_STREAM_DAO_EVENTSQUARANTINETABLENAME=${EventsQuarantineTableName}'
        ContainerEnvEntry19: !Sub 'PN_STREAM_DAO_NOTIFICATIONUNLOCKEDTABLENAME=${NotificationUnlockedTableName}'
        ContainerEnvEntry20: !Sub 'PN_STREAM_SORTEVENTDELAYSECONDS=${SortEventDelaySeconds}'
        ContainerEnvEntry21: !Sub 'PN_STREAM_UNLOCKEDEVENTTTL=${UnlockedEventTtl}'
        ContainerEnvEntry22: !Sub 'PN_STREAM_NOTIFICATIONSLA=${notificationSla}'
        ContainerEnvEntry23: !Sub 'PN_STREAM_MAXWRITTENCOUNTER=${MaxWrittenCounter}'
        ContainerEnvEntry24: !Sub 'PN_STREAM_QUERYEVENTQUARANTINELIMIT=${QueryEventQuarantineLimit}'
        JavaToolOptions: '-Dreactor.netty.ioWorkerCount=50'
        MappedPaths: '/delivery-progresses-2/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref VpcEgressSubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        TaskRoleManagedPolicyArn: !Ref StreamMicroserviceTaskManagedPolicy
        AlbSecurityGroup: !Ref AlbSecurityGroup
        EcsLogGroup: !Ref EcsLogGroup
        LogAlarmStrategyV1: !Ref LogAlarmStrategy

  # Grant operational rights to pn-stream microservice
  StreamMicroserviceTaskManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:BatchGetItem
            Resource:
              - !Sub "${StreamsTableArn}"
              - !Sub "${StreamsTableArn}/*"
              - !Sub "${EventsTableArn}"
              - !Sub "${EventsTableArn}/*"
              - !Sub "${StreamNotificationTableArn}"
              - !Sub "${StreamNotificationTableArn}/*"
              - !Sub "${EventsQuarantineTableArn}"
              - !Sub "${EventsQuarantineTableArn}/*"
              - !Sub "${NotificationUnlockedTableArn}"
              - !Sub "${NotificationUnlockedTableArn}/*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref EventQueueARN
              - !Ref ScheduledActionsQueueARN
              - !Ref EventScheduleQueueARN



  #########################################################
  ###              StreamEventManagerLambda            ###
  #########################################################

  # Lambda function
  StreamEventManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref StreamEventManagerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/streamEventManager.zip"
      Role: !GetAtt StreamEventManagerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          QUEUE_URL: !Ref EventQueueURL
          START_READ_STREAM_TIMESTAMP: !Sub '${StartReadStreamTimestamp}'
          STOP_READ_STREAM_TIMESTAMP: !Sub '${StopReadStreamTimestamp}'
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function role
  StreamEventManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-streamEventManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  StreamEventManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-StreamEventManagerLambdaPolicy
      Roles:
        - !Ref StreamEventManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcKinesisSourceStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcKinesisSourceStreamKeyArn
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource:
              - !Ref EventQueueARN
              - !Ref StreamEventManagerDLQARN


  # CDC to Stream Event Manager
  StreamEventManagerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Sub ${StreamEventManagerLambdaBatchSize}
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcKinesisSourceStreamArn
      FunctionName: !Ref StreamEventManagerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: !Sub ${StreamEventManagerLambdaMaximumBatchingWindowInSeconds}
      MaximumRetryAttempts: !Ref MaximumRetryAttemptsValueStream
      StartingPosition: TRIM_HORIZON
      DestinationConfig:
        OnFailure:
          Destination: !Ref StreamEventManagerDLQARN
      FilterCriteria:
        Filters:
          - Pattern: !Sub '{"data": {"eventName": ["INSERT"], "tableName": ["${PnTimelinesTableName}"]}}'

  StreamEventManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref StreamEventManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  #########################################################
  ###         NotificationStreamManagerLambda           ###
  #########################################################

  # Lambda function
  NotificationStreamManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref NotificationStreamManagerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/notificationStreamEventManager.zip"
      Role: !GetAtt NotificationStreamManagerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          TABLE_NAME: !Sub '${StreamNotificationTableName}'
          TTL_OFFSET: !Sub '${StreamNotificationTtl}'
          START_READ_STREAM_TIMESTAMP: !Sub '${StartReadStreamTimestamp}'
          STOP_READ_STREAM_TIMESTAMP: !Sub '${StopReadStreamTimestamp}'
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function role
  NotificationStreamManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-notificationStreamManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  NotificationStreamManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-notificationStreamManagerLambdaPolicy
      Roles:
        - !Ref NotificationStreamManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcKinesisSourceStreamArn
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Ref StreamNotificationTableArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcKinesisSourceStreamKeyArn
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource:
              !Ref NotificationStreamManagerDLQARN

  # CDC to Stream Event Manager
  NotificationStreamManagerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Sub ${NotificationStreamManagerLambdaBatchSize}
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcKinesisSourceStreamArn
      FunctionName: !Ref NotificationStreamManagerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: !Sub ${NotificationStreamManagerLambdaMaximumBatchingWindowInSeconds}
      MaximumRetryAttempts: !Ref MaximumRetryAttemptsValueNotification
      StartingPosition: TRIM_HORIZON
      DestinationConfig:
        OnFailure:
          Destination: !Ref NotificationStreamManagerDLQARN
      FilterCriteria:
        Filters:
          - Pattern: !Sub '{"data": {"eventName": ["INSERT"], "tableName": ["${PnNotificationTableName}"]}}'

  NotificationStreamManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref NotificationStreamManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn


  ## Dashboard
  StreamMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-stream"
        AlarmArns: !Join
          - ','
          - - !Ref EventQueueAlarmARN
            - !Ref EventQueueAgeAlarmARN
            - !Ref ScheduledActionsQueueAlarmARN
            - !Ref ScheduledActionsQueueAgeAlarmARN
            - !Ref EventScheduleQueueAlarmARN
            - !Ref EventScheduleQueueAgeAlarmARN
        QueueArns: !Join
          - ','
          - - !Ref EventQueueARN
            - !Ref ScheduledActionsQueueARN
            - !Ref EventScheduleQueueARN
        LogGroupsNames: !Join
          - ','
          - - !Sub '/aws/ecs/${ProjectName}-stream'
            - !Sub '/aws/lambda/${NotificationStreamManagerLambdaName}'
            - !Sub '/aws/lambda/${StreamEventManagerLambdaName}'
        DynamoDBTableNames: !Join
          - ','
          - - !Ref StreamNotificationTableName
            - !Ref StreamsTableName
            - !Ref EventsTableName
            - !Ref EventsQuarantineTableName
            - !Ref NotificationUnlockedTableName

Outputs:
  #
  Version:
    Value: !Ref Version
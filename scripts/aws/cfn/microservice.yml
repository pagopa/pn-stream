AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: CommaDelimitedList
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  # Instance parameters
  # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
  # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
  # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
  # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
  # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
  CpuValue:
    Type: Number
    Default: 1024
    Description: Fargate virtual CPU quantity 1024 equals one vCPU

  MemoryAmount:
    Type: Number
    Default: 2048
    Description: Fargate memory amount in MB

  HealthCheckTimeout:
    Type: Number
    Default: 30
    Description: Health check timeout in seconds

  HealthCheckInterval:
    Type: Number
    Default: 30
    Description: Health check interval in seconds

  HealthyThresholdCount:
    Type: Number
    Default: 3
    Description: Number of consecutive health check successes required before considering an unhealthy target healthy

  UnhealthyThresholdCount:
    Type: Number
    Default: 3
    Description: Number of consecutive health check failures required before considering a target unhealthy

  AutoscalingThreshold:
    Type: Number
    Default: 75
    Description: CPU utilization percentage to trigger autoscaling

  AutoscalingCheckPeriod:
    Type: Number
    Default: 60
    Description: Period in seconds to check for autoscaling

  MinTasksNumber:
    Type: Number
    Default: 1
    Description: Minimum number of tasks for the service

  MaxTasksNumber:
    Type: Number
    Default: 10
    Description: Maximum number of tasks for the service

  AutoscalingDataPointN:
    Type: Number
    Default: 3
    Description: Number of data points to alarm for autoscaling

  AutoscalingDataPointM:
    Type: Number
    Default: 5
    Description: Number of evaluation periods for autoscaling

  FargateEFSFileSystemID:
    Type: String
    Description: EFS File System ID for Fargate

  MountEfs:
    Type: String
    Description: Whether to mount EFS (true/false)

  WireTapLogActivation:
    Type: String
    Description: Whether to activate wiretap logging (true/false)

  ContainerImageURI:
    Type: String
    Description: URI of the container image

  AlbSecurityGroup:
    Type: String
    Description: Security group for the application load balancer

  EcsLogGroup:
    Type: String
    Description: Log group for ECS

  LogAlarmStrategy:
    Type: String
    Description: Log alarm strategy

  ConsumedQueueMessagePerMinute:
    Type: Number
    Default: 0
    Description: Weight to assign to queue number of visible messages metric

  ApplicationLoadBalancerMetricsDimensionName:
    Type: String
    Default: ''
    Description: Application load balancer dimension name

  NotificationStreamManagerLambdaName:
    Type: String

  # OpenApi Bucket params
  MicroserviceBucketName:
    Type: String
    Default: ''
    Description: 'Name of the bucket where the microservice files are copied during deploy'

  MicroserviceBucketBaseKey:
    Type: String
    Default: ''
    Description: 'Base key of the microservice in the s3 bucket'

  NotificationStreamManagerDLQAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for NotificationStreamManagerLambda'

  NotificationStreamManagerDLQARN:
    Type: String
    Description: 'DLQ ARN for NotificationStreamManagerLambda'

  DoneActionsQueueAlarmARN:
    Type: String
    Description: stream actions queue dlq alarm ARN

  DoneActionsQueueAgeAlarmARN:
    Type: String
    Description: stream actions queue age alarm ARN

  DoneActionsQueueURL:
    Type: String
    Description: 'Send done actions to this queue read by stream'

  DoneActionsQueueName:
    Type: String
    Description: actions queue name

  DoneActionsQueueARN:
    Type: String
    Description: actions queue ARN

  StreamEventManagerDLQAlarmARN:
    Type: String
    Description: 'DLQ Alarm ARN for StreamEventManagerLambda'

  StreamEventManagerDLQARN:
    Type: String
    Description: 'DLQ ARN for StreamEventManagerLambda'

  StreamEventManagerLambdaMaximumBatchingWindowInSeconds:
    Type: Number
    Default: 20
    Description: Batching window size for lambda triggering

  StreamEventManagerLambdaBatchSize:
    Type: Number
    Default: 60
    Description: Batch size for lambda triggering

  StreamEventManagerLambdaName:
    Type: String
    Default: Name of Event Manager Lambda

  # CDC

  CdcKinesisSourceStreamArn:
    Type: String
    Description: 'Where to send CDC'

  CdcKinesisSourceStreamKeyArn:
    Description: "Kinesis source CDC stream crypto key ARN"
    Type: String

  StartReadStreamTimestamp:
    Type: String
    Description: 'Start timestamp for read stream'
    Default: "1999-01-01T00:00:00Z"

  StopReadStreamTimestamp:
    Type: String
    Description: 'Stop timestamp for read stream'
    Default: "2099-01-01T00:00:00Z"

  WebhookNotificationTableName:
    Type: String
    Description: 'Name of dynamodb table containing webhook notifications'

  WebhookNotificationTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing webhook notifications'

  PnNotificationTableName:
    Type: String
    Description: 'Name of dynamodb table containing notifications'

Resources:

  # pn-stream microservice
  StreamMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-stream'
        CpuValue: !Ref CpuValue
        MemoryAmount: !Ref MemoryAmount
        HealthCheckTimeout: !Ref HealthCheckTimeout
        HealthCheckInterval: !Ref HealthCheckInterval
        HealthyThresholdCount: !Ref HealthyThresholdCount
        UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
        AutoscalingStrategy: CUSTOM
        AutoscalingThreshold: !Ref AutoscalingThreshold
        AutoscalingCheckPeriod: !Ref AutoscalingCheckPeriod
        MinTasksNumber: !Ref MinTasksNumber
        MaxTasksNumber: !Ref MaxTasksNumber
        AutoscalingDataPointN: !Ref AutoscalingDataPointN
        AutoscalingDataPointM: !Ref AutoscalingDataPointM
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        EfsFilesystem: !Ref FargateEFSFileSystemID
        MountEfs: !Ref MountEfs
        WireTapLogActivation: !Ref WireTapLogActivation
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'PN_STREAM_DAO_WEBHOOKNOTIFICATIONTABLE=${WebhookNotificationTableName}'
        JavaToolOptions: '-Dreactor.netty.ioWorkerCount=50'
        MappedPaths: '/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Join [ ',', !Ref SubnetsIds ]
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        TaskRoleManagedPolicyArn: !Ref StreamMicroserviceTaskManagedPolicy
        AlbSecurityGroup: !Ref AlbSecurityGroup
        EcsLogGroup: !Ref EcsLogGroup
        LogAlarmStrategyV1: !Ref LogAlarmStrategy

  # Grant operational rights to pn-stream microservice
  StreamMicroserviceTaskManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource:
              - !Sub "${WebhookNotificationTableArn}"
              - !Sub "${WebhookNotificationTableArn}/*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !Ref DoneActionsQueueARN

  #########################################################
  ###              StreamEventManagerLambda            ###
  #########################################################

  # Lambda function
  StreamEventManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref StreamEventManagerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/streamEventManager.zip"
      Role: !GetAtt StreamEventManagerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          QUEUE_URL: !Ref DoneActionsQueueURL
          START_READ_STREAM_TIMESTAMP: !Sub '${StartReadStreamTimestamp}'
          STOP_READ_STREAM_TIMESTAMP: !Sub '${StopReadStreamTimestamp}'
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function role
  StreamEventManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-streamEventManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  StreamEventManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-StreamEventManagerLambdaPolicy
      Roles:
        - !Ref StreamEventManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcKinesisSourceStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcKinesisSourceStreamKeyArn
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource:
              !Ref DoneActionsQueueARN
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource:
              !Ref StreamEventManagerDLQARN


  # CDC to Stream Event Manager
  StreamEventManagerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Sub ${StreamEventManagerLambdaBatchSize}
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcKinesisSourceStreamArn
      FunctionName: !Ref StreamEventManagerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: !Sub ${StreamEventManagerLambdaMaximumBatchingWindowInSeconds}
      StartingPosition: TRIM_HORIZON
      DestinationConfig:
        OnFailure:
          Destination: !Ref StreamEventManagerDLQARN
      FilterCriteria:
        Filters:
          - Pattern: '{"tableName": ["pn-Timelines"], "eventName": ["INSERT"]}'

  StreamEventManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref StreamEventManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  #########################################################
  ###         NotificationStreamManagerLambda           ###
  #########################################################

  # Lambda function
  NotificationStreamManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref NotificationStreamManagerLambdaName
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/notificationStreamEventManager.zip"
      Role: !GetAtt NotificationStreamManagerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function role
  NotificationStreamManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-notificationStreamManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  NotificationStreamManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-notificationStreamManagerLambdaPolicy
      Roles:
        - !Ref NotificationStreamManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcKinesisSourceStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcKinesisSourceStreamKeyArn
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource:
              !Ref NotificationStreamManagerDLQARN

  # CDC to Stream Event Manager
  NotificationStreamManagerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Sub ${StreamEventManagerLambdaBatchSize}
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcKinesisSourceStreamArn
      FunctionName: !Ref NotificationStreamManagerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: !Sub ${StreamEventManagerLambdaMaximumBatchingWindowInSeconds}
      StartingPosition: TRIM_HORIZON
      DestinationConfig:
        OnFailure:
          Destination: !Ref NotificationStreamManagerDLQARN
      FilterCriteria:
        Filters:
          - Pattern: !Sub '{"tableName": [${PnNotificationTableName}], "eventName": ["INSERT"]}'

  NotificationStreamManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref NotificationStreamManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn


  ## Dashboard
  StreamMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-stream"
        AlarmArns: !Join
          - ','
          - - !Ref DoneActionsQueueAlarmARN
            - !Ref DoneActionsQueueAgeAlarmARN
        QueueArns: !Join
          - ','
          - - !Ref StreamEventManagerDLQAlarmARN
            - !Ref DoneActionsQueueARN
        LogGroupsNames: !Join
          - ','
          - - !Sub '/aws/ecs/${ProjectName}-stream'
            - !Sub '/aws/lambda/${StreamEventManagerLambdaName}'
            - !Sub '/aws/lambda/${NotificationStreamManagerLambdaName}'
        DynamoDBTableNames: !Join
          - ','
          - - !Ref WebhookNotificationTableName

  #### Alarm for custom metric Autoscaling
  AlarmCustomAutoscaling:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ProjectName}-stream-autoscaling-custom"
      AlarmDescription: "Trigger scaling based on custom metric"
      DatapointsToAlarm: !Ref AutoscalingDataPointN
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              Dimensions:
                - Name: QueueName
                  Value: !Ref "DoneActionsQueueName"
              Namespace: "AWS/SQS"
              MetricName: "ApproximateNumberOfMessagesVisible"
            Period: !Ref AutoscalingCheckPeriod
            Stat: Average
          ReturnData: False
        - Id: m4
          MetricStat:
            Metric:
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt StreamMicroservice.Outputs.TargetGroupName
              Namespace: "AWS/ApplicationELB"
              MetricName: "RequestCountPerTarget"
            Period: !Ref AutoscalingCheckPeriod
            Stat: Sum
          ReturnData: False
        - Id: m5
          MetricStat:
            Metric:
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt StreamMicroservice.Outputs.TargetGroupName
                - Name: LoadBalancer
                  Value: !Ref ApplicationLoadBalancerMetricsDimensionName
              Namespace: "AWS/ApplicationELB"
              MetricName: "HealthyHostCount"
            Period: !Ref AutoscalingCheckPeriod
            Stat: Average
          ReturnData: False
        - Id: code
          Expression: !Sub "IF(m5==0, 101, (100 * m1) / (${ConsumedQueueMessagePerMinute} * m5) )"
          Label: !Sub "${ProjectName}-stream-event-queue-custom-metric"
          ReturnData: False
        - Id: http
          Expression: !Sub "(100 * m4) / ${AutoscalingThreshold}"
          Label: !Sub "${ProjectName}-stream-http-custom-metric"
          ReturnData: False
        - Id: e1
          Expression: "IF( code<http, http, code )"
          Label: !Sub "${ProjectName}-stream-autoscale-custom-metric"
      EvaluationPeriods: !Ref AutoscalingDataPointM
      Threshold: 60
      AlarmActions:
        - !GetAtt StreamMicroservice.Outputs.ScaleUpPolicy
      OKActions:
        - !GetAtt StreamMicroservice.Outputs.ScaleDownPolicy

Outputs:
  #
  Version:
    Value: !Ref Version